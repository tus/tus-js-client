import { mkdir, readFile, writeFile } from 'node:fs/promises'
import path, { relative } from 'node:path'

/**
 * Each entry is a "subpackage" that users should be able to import as `tus-js-client/${entry}`.
 */
const EXPORTS = [
  'node/sources/NodeStreamFileSource',
  'node/FileUrlStorage',
  'node/NodeHttpStack',
  'browser/FetchHttpStack',
]

const root = path.join(import.meta.dirname, '..')

/**
 * addExportsToPackageJson adds all entries from EXPORTS to the exports field of package.json,
 * so loaders and bundlers supporting the exports field can resolve them properly to either ESM or CommonJS.
 */
async function addExportsToPackageJson() {
  const packageJsonPath = path.join(root, 'package.json')
  const packageJson = JSON.parse(await readFile(packageJsonPath, 'utf8'))

  for (const destination of EXPORTS) {
    packageJson.exports ??= {}
    packageJson.exports[`./${destination}`] = {
      import: {
        types: `./lib.esm/${destination}.d.ts`,
        default: `./lib.esm/${destination}.js`,
      },
      require: {
        types: `./lib.cjs/${destination}.d.ts`,
        default: `./lib.cjs/${destination}.js`,
      },
    }
  }

  await writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2))
}

/**
 * createExportsFallbacks setups fallbacks for loaders and bundlers not supporting the exports field.
 * It creates subdirectories with a package.json pointing to the CommonJS file and its type definition,
 * as explained in https://github.com/andrewbranch/example-subpath-exports-ts-compat/tree/main/examples/node_modules/package-json-redirects.
 * Therefore, bundlers without `exports` support get at least the CommonJS file and types.
 */
async function createExportsFallbacks() {
  for (const entry of EXPORTS) {
    const fallbackPath = path.join(root, entry)
    await mkdir(fallbackPath, { recursive: true })

    const destinationMain = path.join(root, 'lib.cjs', `${entry}.js`)
    const destinationTypes = path.join(root, 'lib.cjs', `${entry}.d.ts`)

    const packageJson = {
      '//': 'Generated by scripts/setup-exports.js',
      main: relative(fallbackPath, destinationMain),
      types: relative(fallbackPath, destinationTypes),
    }

    const packageJsonPath = path.join(fallbackPath, 'package.json')
    await writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2))
  }
}

await addExportsToPackageJson()
await createExportsFallbacks()
